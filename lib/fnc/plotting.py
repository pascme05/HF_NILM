#######################################################################################################################
#######################################################################################################################
# Title: Baseline NILM Architecture
# Topic: Non-intrusive load monitoring utilising machine learning, pattern matching and source separation
# File: plotting
# Date: 23.10.2021
# Author: Dr. Pascal A. Schirmer
# Version: V.0.0
# Copyright: University of Hertfordshire, Hatfield UK
#######################################################################################################################
#######################################################################################################################


#######################################################################################################################
# Import external libs
#######################################################################################################################
import matplotlib.pyplot as plt
import numpy as np


#######################################################################################################################
# Function
#####################################################################################################################
def plotting(Y_test, Y_Pred, Y_testLabel, Y_PredLabel, setup_Data):
    ####################################################################################################################
    # Welcome Message
    ####################################################################################################################
    print("Running NILM tool: Plotting Results")

    ####################################################################################################################
    # Calculations
    ####################################################################################################################
    # ------------------------------------------
    # init
    # ------------------------------------------
    time = np.linspace(0, len(Y_test),  len(Y_test))

    # ------------------------------------------
    # plotting
    # ------------------------------------------
    for i in range(0, setup_Data['numApp']):
        ii = i + 1
        plt.figure(ii)
        plt.subplot(211)
        plt.plot(time, Y_test[:, i], 'k', time, Y_Pred[:, i], 'b')
        plt.title('Active Power Consumption of Device ' + str(ii))
        plt.ylabel('Power P in [W]')

        plt.subplot(212)
        plt.plot(time, 2*Y_testLabel[:, i], 'k', time, Y_PredLabel[:, i], 'b')
        plt.title('Appliance On-Sets of Device ' + str(ii))
        plt.xlabel('Time t in [s]')
        plt.ylabel('On/Off')
        plt.show()
